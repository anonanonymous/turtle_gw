{"version":3,"sources":["turtle.jsx","TurtleComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["Turtle","updateBlock","height","console","log","fetch","then","data","json","state","block","ln","get_line_number","setState","top_block","selected_block","lines","gw","slice","n_lines","parseInt","BigInt","hash","nonce","length","this","props","text","split","match","params","setInterval","map","line","i","key","className","style","display","timestamp","href","React","Component","TurtleComponent","exact","path","component","Footer","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b67a486.chunk.js","sourcesContent":["/* global BigInt */\n\nimport React from 'react'\n\nclass Turtle extends React.Component {\n    constructor() {\n        super()\n        this.n_lines = 20\n        this.state = {\n            gw: [],\n            selected_block: 1,\n            top_block: 1,\n            lines: [],\n            block: {},\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"mounting:\", this.props)\n        fetch(\"https://gist.githubusercontent.com/anonanonymous/96d7a777c3ce5a067f95d77378b6befa/raw/c4d1b659bab51057243e2a144801006e0f53a557/gistfile1.txt\")\n            .then(data => {\n                data.text().then(text => this.setState({\n                    gw: text.split(\"\\n\"),\n                },\n                    () => {\n                        if (this.props.match.params.height) {\n                            this.setState({\n                                selected_block: parseInt(this.props.match.params.height, 10)\n                            }, () => this.updateBlock(this.state.selected_block))\n                        }\n                        else {\n                            setInterval(this.updateBlock, 3000)\n                        }\n                    }))\n            })\n    }\n\n    updateBlock = (height = \"top\") => {\n        console.log(\"pinh\", height)\n        fetch(\"https:/blockapi.turtlepay.io/block/header/\" + height)\n            .then(data => data.json())\n            .then(data => {\n                if (this.state.block === null || data.height !== this.state.block.height) {\n                    let ln = this.get_line_number(data)\n                    console.log(\"line: \" + ln)\n                    this.setState({\n                        block: data,\n                        top_block: data.height,\n                        selected_block: this.state.top_block === this.state.selected_block ? data.height : this.state.selected_block,\n                        lines: this.state.gw.slice(ln, ln + this.n_lines),\n                    })\n                }\n            })\n    }\n\n    /* the line number is the blockhash + nonce */\n    get_line_number = (block) => (\n        parseInt((BigInt(\"0x\" + block.hash) + BigInt(block.nonce)) % BigInt(this.state.gw.length - this.n_lines), 10)\n    )\n\n    render() {\n        console.log(\"state:\", this.state)\n        let lines = this.state.lines.map((line, i) => <code key={i} className=\"gw-line\">{line}</code>)\n        return (\n            <div>\n                <h2 style={this.state.lines.length ? { display: \"none\" } : {}}>\n                    Entertaining God...\n                </h2>\n                <div style={!this.state.lines.length ? { display: \"none\" } : {}}>\n                    <h4>Hash: {this.state.block.hash}</h4>\n                    <h4>Nonce: {this.state.block.nonce}</h4>\n                    <h4>Timestamp: {this.state.block.timestamp}</h4>\n                    <h3>Passage for block: {this.state.block.height}</h3>\n                    <div className=\"gw-container\">\n                        <a href={\n                            this.props.match.params.height ?\n                                this.state.selected_block + 1 :\n                                \"#\"\n                        } className=\"gw-nav\">&lt;</a>\n                        <div>{lines}</div>\n                        <a href={\n                            this.state.selected_block - 1\n                        } className=\"gw-nav\">&gt;</a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Turtle","import React from \"react\"\nimport Turtle from \"./turtle\"\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\"\n\nfunction TurtleComponent() {\n    console.log(\"tc mount\")\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\" component={Turtle} />\n                <Route exact path=\"/:height\" component={Turtle} />\n            </Switch>\n        </Router>\n    )\n}\n\nexport default TurtleComponent","import React from 'react'\nimport TurtleComponent from './TurtleComponent'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src=\"/tad.png\" className=\"App-logo\" alt=\"logo\" /> */}\n      </header>\n      <TurtleComponent />\n      <Footer />\n    </div>\n  )\n}\n\nfunction Footer() {\n  return (\n    <footer>\n      A project by termek\n    </footer>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}